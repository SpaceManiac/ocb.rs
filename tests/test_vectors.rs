#![deny(warnings)]

extern crate ocb;

fn from_hex(x: &str) -> Vec<u8> {
    let mut out = Vec::with_capacity(x.len() / 2);
    for chunk in x.as_bytes().chunks(2) {
        let hi = (chunk[0] as char).to_digit(16).unwrap() as u8;
        let lo = (chunk[1] as char).to_digit(16).unwrap() as u8;
        out.push((hi << 4) | lo);
    }
    out
}

fn from_hex_array<T: for<'a> std::convert::TryFrom<&'a [u8]>>(x: &str) -> T {
    T::try_from(&from_hex(x)).ok().expect("wrong size")
}

macro_rules! test_vector {
    (K:$key:expr; N:$nonce:expr; A:$assoc:expr; P:$pt:expr; C:$ct:expr;) => {{
        let mut ctx = ocb::Context::new(ocb::Key(from_hex_array($key))).unwrap();
        let nonce: ocb::Nonce = ocb::Nonce(from_hex_array($nonce));
        let assoc = from_hex($assoc);
        let pt = from_hex($pt);
        let ct = from_hex($ct);

        assert_eq!(ct, ctx.encrypt(&mut Some(nonce.clone()).into_iter(),
            &pt, &assoc).unwrap().1);

        assert_eq!(pt, ctx.decrypt(nonce, &ct, &assoc).unwrap());
    }}
}

// Test vectors from http://tools.ietf.org/html/rfc7253#appendix-A

#[test]
fn vectors() {
    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221100";
         A: "";
         P: "";
         C: "785407BFFFC8AD9EDCC5520AC9111EE6";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221101";
         A: "0001020304050607";
         P: "0001020304050607";
         C: "6820B3657B6F615A5725BDA0D3B4EB3A257C9AF1F8F03009";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221102";
         A: "0001020304050607";
         P: "";
         C: "81017F8203F081277152FADE694A0A00";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221103";
         A: "";
         P: "0001020304050607";
         C: "45DD69F8F5AAE72414054CD1F35D82760B2CD00D2F99BFA9";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221104";
         A: "000102030405060708090A0B0C0D0E0F";
         P: "000102030405060708090A0B0C0D0E0F";
         C: "571D535B60B277188BE5147170A9A22C3AD7A4FF3835B8C5701C1CCEC8FC3358";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221105";
         A: "000102030405060708090A0B0C0D0E0F";
         P: "";
         C: "8CF761B6902EF764462AD86498CA6B97";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221106";
         A: "";
         P: "000102030405060708090A0B0C0D0E0F";
         C: "5CE88EC2E0692706A915C00AEB8B2396F40E1C743F52436BDF06D8FA1ECA343D";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221107";
         A: "000102030405060708090A0B0C0D0E0F1011121314151617";
         P: "000102030405060708090A0B0C0D0E0F1011121314151617";
         C: "1CA2207308C87C010756104D8840CE1952F09673A448A122C92C62241051F57356D7F3C90BB0E07F";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221108";
         A: "000102030405060708090A0B0C0D0E0F1011121314151617";
         P: "";
         C: "6DC225A071FC1B9F7C69F93B0F1E10DE";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA99887766554433221109";
         A: "";
         P: "000102030405060708090A0B0C0D0E0F1011121314151617";
         C: "221BD0DE7FA6FE993ECCD769460A0AF2D6CDED0C395B1C3CE725F32494B9F914D85C0B1EB38357FF";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA9988776655443322110A";
         A: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F";
         P: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F";
         C: "BD6F6C496201C69296C11EFD138A467ABD3C707924B964DEAFFC40319AF5A48540FBBA186C5553C68AD9F592A79A4240";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA9988776655443322110B";
         A: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F";
         P: "";
         C: "FE80690BEE8A485D11F32965BC9D2A32";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA9988776655443322110C";
         A: "";
         P: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F";
         C: "2942BFC773BDA23CABC6ACFD9BFD5835BD300F0973792EF46040C53F1432BCDFB5E1DDE3BC18A5F840B52E653444D5DF";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA9988776655443322110D";
         A: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627";
         P: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627";
         C: "D5CA91748410C1751FF8A2F618255B68A0A12E093FF454606E59F9C1D0DDC54B65E8628E568BAD7AED07BA06A4A69483A7035490C5769E60";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA9988776655443322110E";
         A: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627";
         P: "";
         C: "C5CD9D1850C141E358649994EE701B68";
    }

    test_vector! {
         K: "000102030405060708090A0B0C0D0E0F";
         N: "BBAA9988776655443322110F";
         A: "";
         P: "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627";
         C: "4412923493C57D5DE0D700F753CCE0D1D2D95060122E9F15A5DDBFC5787E50B5CC55EE507BCB084E479AD363AC366B95A98CA5F3000B1479";
    }
}
